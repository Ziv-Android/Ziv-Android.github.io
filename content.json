{"meta":{"title":"Ziv‘s blog","subtitle":"Floating","description":"Summary knowledge to share.","author":"ZhaoPeng","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"vim使用入门","date":"2017-07-08T10:39:27.854Z","updated":"2017-07-08T10:39:28.126Z","comments":true,"path":"2017/07/08/vim使用入门/","link":"","permalink":"http://yoursite.com/2017/07/08/vim使用入门/","excerpt":"","text":"Linux vi/vim使用入门","categories":[],"tags":[]},{"title":"MarkDown速学笔记","slug":"MarkDown速学笔记","date":"2017-05-09T16:00:30.000Z","updated":"2017-07-08T05:47:41.868Z","comments":true,"path":"2017/05/10/MarkDown速学笔记/","link":"","permalink":"http://yoursite.com/2017/05/10/MarkDown速学笔记/","excerpt":"","text":"献给想要快速使用MarkDown又不想花时间的各位12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667基础区------1. 段落的前后必须是空行2. 段落内换行使用&lt;br&gt; &lt;br&gt;3. 一级标题===，二级标题---4. 对称使用#同样表示标题 &lt;br&gt;5. \\&gt;表示引用，多行引用每一行都要加，&gt;&gt;表示引用嵌套 &lt;br&gt;6. 无序列表使用`* `,`+ `,`- `注意符号后的空格不能省略7. 有序列表数字.空格，数字不影响顺序，但建议按顺序来8. 有序无序可相互嵌套 &lt;br&gt;9. 数字\\.用来显示点取消列表显示 &lt;br&gt;10. 代码块表示方法一： Hello World11. 行内代码`Hello World`12. 分割线`___ *** &lt;hr&gt;` &lt;br&gt;13. 超链接&lt;邮箱或较短链接&gt;或者以下格式便于统一管理 [Google][link][link]:http://www.google.com/ &quot;Google&quot;14. 图像![图像名](https://图像Uri &quot;描述&quot;)或使用以下标准 ![图像名][tuxiang][tuxiang]:(https://图像Uri &quot;描述&quot;&quot;15. Markdown 不支持指定图片的显示大小，不过可以通过直接插入&lt;img /&gt;标签来指定相关属性： &lt;img src=&quot;https://图像Uri&quot; alt=&quot;加载前或加载失败显示&quot; title=&quot;描述&quot; width=&quot;50&quot; height=&quot;50&quot; /&gt; &lt;br&gt;16. 强调，符号之间不能有空白，需要显示的内容包含`*`或`_`时，使用`\\*`和`\\_` *斜体1* _斜体2_ &lt;em&gt;斜体3&lt;/em&gt; **加粗1** __加粗2__ &lt;strong&gt;加粗3&lt;/strong&gt;17. 转义字符 \\ ` * _ &#123;&#125; [] () # + - . !## 高级区18. 删除线~~hahaha~~19. 代码快语法高亮，代码段首尾添加“``` ```”class Hello&#123; int main()&#123; printf(&quot;aaaaa&quot;); &#125;&#125;20. 表格| 符号 | 对齐方式 || ---- | ---- || :--- | 左对齐 || :--: | 居中对齐 || \\--- | 右对齐 |21. 任务列表Task List- [ ] Eat- [x] Code - [x] HTML - [x] CSS - [x] JavaScript- [ ] Sleep记得空行哦","categories":[{"name":"Utils","slug":"Utils","permalink":"http://yoursite.com/categories/Utils/"}],"tags":[]},{"title":"统一建模工具UML(Unified Modeling Langage)","slug":"Ubuntu安装StarUML","date":"2017-05-04T16:00:30.000Z","updated":"2017-05-09T16:41:23.627Z","comments":true,"path":"2017/05/05/Ubuntu安装StarUML/","link":"","permalink":"http://yoursite.com/2017/05/05/Ubuntu安装StarUML/","excerpt":"","text":"UML是一种通用的建模语言，适用与一般系统和并行、分布式系统。 1. 用例图(Use Case Diagram)从用户的角度描述系统功能，并指各功能的操作者，描述用户需求 2. 静态图2.1 类图(Class Diagram)描述系统中类的静态结构 2.2 包图(Package Diagram)包和类组成，描述包与包之间的关系，描述系统的分层结构 2.3 对象图(Object Diagram)类图的实例 3. 行为图描述系统动态模型和对象组成的交互关系 3.1 活动图(Activity Diagram)业务实现用例的工作流程，描述一组顺序或并发的活动 3.2 状态图(Statechart Diagram)描述状态到状态控制流(状态转移条件)，常用与动态建模 4. 交互图对象之间的交互关系 4.1 顺序图(Sequence Diagram 时序图)对象之间的动态合作关系，强调对象发送消息的顺序，同时显示对象之间的交互 4.2 合作图(Communication Diagram 通信图)对象之间的协助关系 5. 实现图5.1 配置图(Deployment Diagram 部署图)定义系统中软硬件的物理体系结构 #starUML提供的其他图 复合结构图(Composite Structure Diagram)组件图(Component Diagram)简介图(Profile Diagram)实体-联系图(Entity Relationship Diagram)ER Diagram，常用于数据库设计矩形框：表示实体，在框中记入实体名。菱形框：表示联系，在框中记入联系名。椭圆形框：表示实体或联系的属性，将属性名记入框中。对于主属性名，则在其名称下划一下划线。连线：实体与属性之间；实体与联系之间；联系与属性之间用直线相连，并在直线上标注联系的类型。（对于一对一联系，要在两个实体连线方向各写1； 对于一对多联系，要在一的一方写1，多的一方写N；对于多对多关系，则要在两个实体连线方向各写N,M。) 流程图(Flowchart Diagram)模型 功能模型[用例图]：从用户的角度描述系统功能。 对象模型[静态图]：采用对象，属性，操作，关联等概念展示系统的结构和基础。 动态模型[行为图]：展现系统内部行为。 StarUML的安装进入官网下载页选择下载对应版本的StarUML，由于StarUML依赖于 libgcrypt11，所以安装过程中会提示缺少libgcrypt11，下载 文件并执行12sudo dpkg -i libgcrypt11_1.5.3-2ubuntu4.4_amd64.debsudo apkg -i StarUML-v2.7.0-64-bit.deb 完成安装 基本Class之间的关系Association 关联Directed Association 有向关联Aggregation 聚合Composition 组成Dependency 依赖Generalization 概括Interface Realization 接口实现 正版破解Linux安装完成后，在/opt/staruml/www/license/node路径下有他一个LicenseManagerDomain.js文件，使用sodu权限打开123456789101112131415161718192021222324252627282930function validate(PK, name, product, licenseKey) &#123; var pk, decrypted; // edit by yourName return &#123; name: \"yourName\", product: \"StarUML\", licenseType: \"vip\", quantity: \"ziv-android.github.io\", licenseKey: \"\" &#125;; try &#123; pk = new NodeRSA(PK); decrypted = pk.decrypt(licenseKey, 'utf8'); &#125; catch (err) &#123; return false; &#125; var terms = decrypted.trim().split(\"\\n\"); if (terms[0] === name &amp;&amp; terms[1] === product) &#123; return &#123; name: name, product: product, licenseType: terms[2], quantity: terms[3], licenseKey: licenseKey &#125;; &#125; else &#123; return false; &#125; &#125; 保存退出，然后在starUML软件中Help–&gt;Enter License输入yourName回车即可完成破解注册","categories":[{"name":"Utils","slug":"Utils","permalink":"http://yoursite.com/categories/Utils/"}],"tags":[]},{"title":"ADB命令常用功能","slug":"ADB命令常用功能","date":"2017-04-24T16:30:30.000Z","updated":"2017-09-17T08:09:04.074Z","comments":true,"path":"2017/04/25/ADB命令常用功能/","link":"","permalink":"http://yoursite.com/2017/04/25/ADB命令常用功能/","excerpt":"","text":"查看ADB版本信息 1adb version 查看多有设备连接信息 1adb devices 将本地（PC）文件推送至远程（手机） 1adb push [源地址] [目的地址] 将手机（手机）文件取回本地（PC） 1adb pull [源地址] [目的地址] 重启ADB服务 12345transfer error: Invalid argumentAdb connection Error:远程主机强迫关闭了一个连接Connection attempts:1Connection attempts:2··· 使用ADB命令12adb kill-serveradb start-server 安装卸载手机应用1Failure [INSTALL_FAILED_ALREADY_EXISTS] 安装应用到手机1adb install FileName.apk 卸载应用1adb uninstall [packageName] 进入设备控制台1adb shell 进入控制台后可以使用查看目录信息1ls 查看进程信息1ps 杀死进程1kill pid","categories":[{"name":"Utils","slug":"Utils","permalink":"http://yoursite.com/categories/Utils/"}],"tags":[]},{"title":"Linux基础入门","slug":"Linux基础入门","date":"2017-04-24T16:30:30.000Z","updated":"2017-09-17T08:07:51.925Z","comments":true,"path":"2017/04/25/Linux基础入门/","link":"","permalink":"http://yoursite.com/2017/04/25/Linux基础入门/","excerpt":"","text":"目录操作创建目录1mkdir dir 切换目录1cd dir 移动目录1mv yuan mudi 删除目录1rm -rf dir 查看目录下的文件1ls dir 文件操作创建文件1touch dir/fileName 复制文件1cp yuanFile mudiFile 删除文件1rm fileName 查看文件内容1cat dir/fileName 过滤、管道与重定向过滤过滤出 /etc/passwd 文件中包含 root 的记录1grep 'root' /etc/passwd 递归地过滤出 /var/log/ 目录中包含 linux 的记录1grep -r 'linux' /var/log/ 管道简单来说, Linux 中管道的作用是将上一个命令的输出作为下一个命令的输入, 像 pipe 一样将各个命令串联起来执行, 管道的操作符是 |比如, 我们可以将 cat 和 grep 两个命令用管道组合在一起1cat /etc/passwd | grep 'root' 过滤出 /etc 目录中名字包含 ssh 的目录(不包括子目录)1ls /etc | grep 'ssh' 重定向可以使用 &gt; 或 &lt; 将命令的输出重定向到一个文件中1echo 'Hello World' &gt; ~/test.txt 运维常用命令ping命令对 cloud.tencent.com 发送 4 个 ping 包, 检查与其是否联通1ping -c 4 cloud.tencent.com netstat命令netstat 命令用于显示各种网络相关信息，如网络连接, 路由表, 接口状态等等列出所有处于监听状态的tcp端口1netstat -lt 查看所有的端口信息, 包括 PID 和进程名称1netstat -tulpn ps命令过滤得到当前系统中的 ssh 进程信息1ps -aux | grep 'ssh' 参考资料：https://cloud.tencent.com/developer/labs/gallery?utm_source=portal&amp;utm_medium=recommend&amp;utm_campaign=recmd1","categories":[{"name":"Utils","slug":"Utils","permalink":"http://yoursite.com/categories/Utils/"}],"tags":[]},{"title":"Android NDK C++ Support","slug":"Android NDK C++ Support","date":"2017-04-24T16:30:30.000Z","updated":"2017-09-17T08:08:42.916Z","comments":true,"path":"2017/04/25/Android NDK C++ Support/","link":"","permalink":"http://yoursite.com/2017/04/25/Android NDK C++ Support/","excerpt":"","text":"支持的C++运行库比较 C++运行库 C++异常支持 C++RTTI支持 C++标准库 system系统库 No No No GAbi++ No Yes No STLport No Yes Yes GNU STL Yes Yes Yes 在Application.mk文件中控制使用1APP_STL := system 默认使用system，使用最多的设置是gnustl_static C++异常的支持不仅仅需要在Application.mk中配置APP_CPPFLAGS += -fexceptions，还需要在Android.mk对应的module下添加LOCAL_CPP_FEATURES += exceptions C++RTTI的支持Run-Time Type Information运行库类型信息，是一种机制，用于执行安全类型转化。考虑兼容性和性能，默认不开启1LOCAL_CPP_FEATURES += rtti 1APP_CPPFLAGS += -frtti 静态库与动态库的选择静态库：项目仅包含单一的原生模块动态库：项目包含多个原生模块逆向加载库文件，先加载依赖库，然后才可以加载依赖于它的原生模块 C++标准库入门 STLport文档 GNU STL文档 容器容器是一个对象，存放其他对象，提供访问操作元素的方法，并提供容器内对象的生命周期 序列序列是大小可变的元素线性排序的容器 vector支持随机访问元素，支持在末尾以常量时间插入和删除元素，在其他位置以线性时间插入和删除元素 deque支持vector所有，并且支持序列起始位置以常量时间插入和删除元素 list双向链表 slist单向链表关联容器关联容器是一种大小可变的容器，支持通过键高效检索 排序关联容器按区分大小写升序排序来存储键值，操作复杂度小于等于对数阶set 元素不同，已排序map 元素不同，键值对multiset 元素允许相同，已排序multimap 元素允许相同，一键对多值 哈希关联容器基于哈希表实现，适合做快速查询，不排序hashed_set 不允许重复元素hash_map 键值对hash_multiset 允许重复元素hash_multimap 元素允许相同，一键对多值适配器容器适配器用于在已有的基本容器类型的基础上提供专门的容器类型 stack 后进先出（LIFO） queue 先进先出（FIFO）StringString字符序列同样为容器类型，除序列常用的方法外，string类追加了标准的字符串操作方法，如字符串串联和搜索迭代器迭代器可以对指定范围内或一个容器内的对象进行迭代。迭代器是泛化指针，但它们被实现成为通用类的形式。迭代器是容器之间的接口和算法，基于访问权限的级别和要执行的操作类型，分5种基本迭代器： Input iterator: 读取引用元素的值 Output iterator: 修改当前位置对象的值 Forward iterator: 不规定输入输出操作，用于符合值的线性序列的多种算法 Bidirectional iterator: 向前或向后遍历给定范围元素 Random access iterator: 提供普通C指针算法的所有操作算法对给定范围的元素，算法提供功能对其搜索、替换、复制和提取边界。依靠迭代器多位接口遍历容器C++运行库线程安全C++运行库的实现都是线程安全的，对共享容器的多线程读操作为线程安全，但读写同时操作需要保证互斥性C++运行库调试模式GNU STL调试模式使用_gnu_debug命名空间代替std为容器提供调试模式启动副本，更优的选择使用预处理标识_GLIBCXX_DEBUG在Android.mk文件中使用LOCAL_CFLAGS += -D_GLIBCXX_DEBUG开启调试模式STLport调试模式预处理标识_STLP_DEBUG在Android.mk文件中定义123LOCAL_CFLAGS += -D_STLP_DEBUGLOCAL_CFLAGE += -D_STLP_DEBUG_MESSAGELOCAL_LDLIBS += -llog 实现全局函数__stl_debug_message123456789#include &lt;stdarg.h&gt;#include &lt;android/log.h&gt;void __stl_debug_message(const char* format_str, ...)&#123; va_list ap; va_start(ap, format_str); __android_log_vprint(ANDROID_LOG_FATAL, \"STLport\", format_srt, ap); va_end(ap);&#125;","categories":[{"name":"Utils","slug":"Utils","permalink":"http://yoursite.com/categories/Utils/"}],"tags":[]},{"title":"Create The Blog For Free","slug":"使用Node.js+Hexo+GitHub搭建个人Blog心得","date":"2017-04-24T16:30:30.000Z","updated":"2017-04-24T16:40:19.784Z","comments":true,"path":"2017/04/25/使用Node.js+Hexo+GitHub搭建个人Blog心得/","link":"","permalink":"http://yoursite.com/2017/04/25/使用Node.js+Hexo+GitHub搭建个人Blog心得/","excerpt":"","text":"Node.js首先官网安装Node.js这是一切的根本，我们要使用npm命令安装Hexo以及需要依赖的插件。 Hexo同样访问官网获取最新的Hexo框架执行命令12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 恭喜你已经可以可通过 http://localhost:4000/ 查看本地静态Blog GitHub相关注册帐号上传ssh-key，并测试12$ ssh-keygen -t rsa -C \"你的GitHub注册邮箱\"$ ssh -T git@github.com 创建代码仓库 用户名.github.io 注意一定要使用用户名创建开启GitHub Pages功能 安装插件npm install hexo-deployer-git --save 配置插件在_config.yml中查找到”deploy”添加如下配置信息12345678910111213141516171819202122232425# You can use this:deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] name: [git user] email: [git email] extend_dirs: [extend directory] ignore_hidden: false # default is true# or this:deploy: type: git message: [message] repo: github: &lt;repository url&gt;,[branch] coding: &lt;repository url&gt;,[branch] extend_dirs: - [extend directory] - [another extend directory] ignore_hidden: public: false [extend directory]: true [another extend directory]: false 一般只写type，repo和branch信息即可，message使用默认日期信息 Blog更新只需在Bash下执行以下命令即可，插件会帮助我们同步到我们对应的Git下12$ hexo g #hexo generate$ hexo d #hexo deploy 主题替换下载喜欢的主题保存在Hexo目录下的themes文件夹下，修改_config.yml文件中的”theme”为你下载的文件目录名，执行123$ hexo clean$ hexo g$ hexo d 注意：主题的替换有可能会导致需要安装新的hexo插件，详情可以参考对应主题的README信息安装即可，官方主题地址 域名的注册由于我只是个人笔记的整理记录与分享，并未考虑注册域名，所以之后的步骤本人并未尝试，想玩的玩家请参考致谢中的步骤即可，谢谢…… 致谢https://xuanwo.org/2015/03/26/hexo-intor/http://www.jianshu.com/p/f4cc5866946bhttp://blog.liuxianan.com/build-blog-website-by-hexo-github.html#shi-yong-hexo-xie-bo-ke","categories":[{"name":"Utils","slug":"Utils","permalink":"http://yoursite.com/categories/Utils/"}],"tags":[]},{"title":"使用VSFTPD搭建FTP服务器","slug":"搭建FTP服务器","date":"2017-04-24T16:30:30.000Z","updated":"2017-09-17T08:07:20.773Z","comments":true,"path":"2017/04/25/搭建FTP服务器/","link":"","permalink":"http://yoursite.com/2017/04/25/搭建FTP服务器/","excerpt":"","text":"安装vsftpd1sudo apt-get install vsftpd -y 启动vsftpd安装完成后vsftpd会默认使用21端口自动启动，通过netstat命令查看状态1sudo netstat -nltp | grep 21 如果没有启动，则手动启动vsftpd服务1sudo systemctl start vsftpd.service 创建欢迎信息（可选）方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。12sudo mkdir /home/uftpsudo touch /home/uftp/welcome.txt 新建用户uftp并设置密码123sudo useradd -d /home/uftp -s /bin/bash uftpsudo passwd uftpsudo rm /etc/pam.d/vsftpd 重要：第三步该文件必须被删除，否则会出现无法登陆的情况 修改vsftpd配置修改限制仅通过FTP访问1sudo usermod -s /sbin/nologin uftp 修改vsftpd配置文件1sudo chmod a+w /etc/vsftpd.conf 将如下配置添加到 /etc/vsftpd.conf 配置文件最下方123456789101112131415161718# 限制用户对主目录以外目录访问chroot_local_user=YES# 指定一个 userlist 存放允许访问 ftp 的用户列表userlist_deny=NOuserlist_enable=YES# 记录允许访问 ftp 用户列表userlist_file=/etc/vsftpd.user_list# 不配置可能导致莫名的530问题seccomp_sandbox=NO# 允许文件上传write_enable=YES# 使用utf8编码utf8_filesystem=YES 新建文件/etc/vsftpd.user_list12sudo touch /etc/vsftpd.user_listsudo chmod a+w /etc/vsftpd.user_list 添加用户在user_list中，如uftp 设置访问权限设置主目录访问权限(只读):1sudo chmod a-w /home/uftp 新建公共目录，并设置权限（读写）：1sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public 重启vsftpd 服务：1sudo systemctl restart vsftpd.service 至此ftp服务器搭建完毕","categories":[{"name":"Utils","slug":"Utils","permalink":"http://yoursite.com/categories/Utils/"}],"tags":[]},{"title":"搭建Git服务器","slug":"搭建Git服务器","date":"2017-04-24T16:30:30.000Z","updated":"2017-09-17T08:06:54.875Z","comments":true,"path":"2017/04/25/搭建Git服务器/","link":"","permalink":"http://yoursite.com/2017/04/25/搭建Git服务器/","excerpt":"","text":"什么是GitGit是一款免费、开源的分布式版本控制系统，用于敏捷高效的进行项目管理。以CentOS 7.2 x64为例，一步步搭建git服务器 安装依赖库和编译工具依赖库1yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel 编译工具1yum install gcc perl-ExtUtils-MakeMaker 下载git官网查看一个新版稳定的源码包下载 https://www.kernel.org/pub/software/scm/git/12cd /usr/local/srcwget https://www.kernel.org/pub/software/scm/git/git-2.14.1.tar.gz 解压编译和安装解压1tar -zvxf git-2.14.1.tar.gz 编译12cd git-2.14.1make all prefix=/usr/local/git 安装到 /usr/local/git 目录下1make install prefix=/usr/local/git 配置PATH环境变量将git安装目录配置在PATH环境变量中12echo 'export PATH=$PATH:/usr/local/git/bin' &gt;&gt; /etc/bashrcsource /etc/bashrc 测试是否配置成功1git --version 至此git服务器的搭建已经完成，接下来创建一个git账号测试一下 测试git创建git账号密码12useradd -m usernamepasswd username 密码长度8位，不能为简单的数字 初始化git仓库123mkdir -p /data/repositoriescd /data/repositories/git init --bare test.git 配置用户权限设置git仓库用户和用户组并设置权限12chown -R username:username /data/repositorieschmod 755 /data/repositories 编辑/ect/passwd文件，将username的登陆shell配置修改为git-shell目录12vim /etc/passwdusername:x:500:500::/home/username:/usr/local/git/bin/git-shell 出于安全目的，限制 git 账号的 ssh 连接只能是登录 git-shell使用 which git-shell 命令查看本机 git-shell 路径 使用git clone服务123cd ~git clone username@&lt;服务器IP&gt;:/data/repositories/test.git···","categories":[{"name":"Utils","slug":"Utils","permalink":"http://yoursite.com/categories/Utils/"}],"tags":[]}]}